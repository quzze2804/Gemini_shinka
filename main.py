import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
)
import datetime
import os 
import pytz 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7646808754:AAFEd_-JuxKF7jy4_xbRvolfDBbbCHy6Tt8") 

try:
    ADMIN_CHAT_ID = int(os.environ.get("ADMIN_USER_ID", "7285220061"))
except (ValueError, TypeError):
    ADMIN_CHAT_ID = None 
    logging.warning("ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

TIMEZONE = pytz.timezone('Europe/Kiev') 

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
ASK_NAME, ASK_PHONE = range(2)
RESCHEDULE_SELECT_DATE, RESCHEDULE_SELECT_TIME = range(2, 4) 

# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

booked_slots = {}

async def notify_admin_new_booking(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"üîî **–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {booking_info.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} "
        f"(Telegram: {booking_info.get('telegram_user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, ID: {booking_info['user_id']})\n"
        f"**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {booking_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"**–î–∞—Ç–∞:** {booking_info['date'].strftime('%d.%m.%Y')}\n"
        f"**–í—Ä–µ–º—è:** {booking_info['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def notify_admin_cancellation(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"‚ùå **–û–¢–ú–ï–ù–ê –ó–ê–ü–ò–°–ò!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {booking_info.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} "
        f"(Telegram: {booking_info.get('telegram_user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, ID: {booking_info['user_id']})\n"
        f"**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {booking_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"**–û—Ç–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞:** {booking_info['date'].strftime('%d.%m.%Y')}\n"
        f"**–û—Ç–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è:** {booking_info['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def notify_admin_reschedule(context: ContextTypes.DEFAULT_TYPE, old_booking: dict, new_booking: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"üîÑ **–ü–ï–†–ï–ù–û–° –ó–ê–ü–ò–°–ò!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {new_booking.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} "
        f"(Telegram: {new_booking.get('telegram_user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, ID: {new_booking['user_id']})\n"
        f"**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {new_booking.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"**–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å:**\n"
        f"  –î–∞—Ç–∞: {old_booking['date'].strftime('%d.%m.%Y')}\n"
        f"  –í—Ä–µ–º—è: {old_booking['time']}\n\n"
        f"**–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:**\n"
        f"  –î–∞—Ç–∞: {new_booking['date'].strftime('%d.%m.%Y')}\n"
        f"  –í—Ä–µ–º—è: {new_booking['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π."""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É. "
        "–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏?"
    )
    keyboard = [
        [InlineKeyboardButton("üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data="book_appointment")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ FAQ", callback_data="info_and_faq")], # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üìç –ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="our_location")] # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    else: 
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup)


async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    keyboard = []
    now_aware = datetime.datetime.now(TIMEZONE)
    today_in_tz = now_aware.date() 
    
    for i in range(7):  
        date = today_in_tz + datetime.timedelta(days=i)
        keyboard.append(
            [InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=f"select_date_{date.isoformat()}")]
        )
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    selected_date_str = query.data.replace("select_date_", "")
    selected_date_naive = datetime.date.fromisoformat(selected_date_str) 

    keyboard = []
    start_time = datetime.time(8, 0) 
    end_time = datetime.time(17, 0)  
    interval = datetime.timedelta(minutes=30)

    now_aware = datetime.datetime.now(TIMEZONE)
    
    current_slot_datetime = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, start_time))
    
    while current_slot_datetime.time() <= end_time:
        slot_str = current_slot_datetime.strftime("%H:%M")
        
        is_booked = booked_slots.get(selected_date_str, {}).get(slot_str) is not None
        
        is_past_slot = (current_slot_datetime < now_aware - datetime.timedelta(minutes=1)) 
        
        button_text = f"{slot_str}"
        if is_booked:
            button_text += " (–ó–∞–Ω—è—Ç–æ)"
        elif is_past_slot:
            button_text += " (–ü—Ä–æ—à–ª–æ)" 

        callback_data = f"select_time_{selected_date_str}_{slot_str}"
        
        is_disabled = is_booked or is_past_slot

        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=callback_data if not is_disabled else "ignore")] 
        )
        current_slot_datetime += interval

    if context.user_data.get('reschedule_mode'):
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")])
    else:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="book_appointment")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {selected_date_naive.strftime('%d.%m.%Y')}:",
        reply_markup=reply_markup
    )

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: 
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    query = update.callback_query
    await query.answer()

    if query.data == "ignore": 
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.") 
        return ConversationHandler.END 

    parts = query.data.split("_")
    selected_date_str = parts[2]
    selected_time_str = parts[3]
    
    context.user_data['selected_date'] = selected_date_str
    context.user_data['selected_time'] = selected_time_str

    selected_date_naive = datetime.date.fromisoformat(selected_date_str)
    selected_time_naive = datetime.time.fromisoformat(selected_time_str)
    selected_datetime_aware = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, selected_time_naive))

    now_aware = datetime.datetime.now(TIMEZONE)

    if selected_datetime_aware < now_aware - datetime.timedelta(minutes=1): 
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return ConversationHandler.END
    
    if booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return ConversationHandler.END

    if context.user_data.get('reschedule_mode') and \
       context.user_data.get('user_name_for_booking') and \
       context.user_data.get('phone_number'):
        
        confirmation_text = (
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n"
            f"üë§ **–ò–º—è:** {context.user_data['user_name_for_booking']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {context.user_data['phone_number']}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å", callback_data="cancel_booking_process")] 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
        return ConversationHandler.END 
    else:
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω'):")
        return ASK_NAME 

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_name = update.message.text
    if not user_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return ASK_NAME 

    context.user_data['user_name_for_booking'] = user_name 
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '+380–•–•–•–•–•–•–•–•–•') –¥–ª—è —Å–≤—è–∑–∏. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )
    return ASK_PHONE 

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å."""
    phone_number = update.message.text
    if not phone_number:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return ASK_PHONE 

    context.user_data['phone_number'] = phone_number 

    selected_date_str = context.user_data['selected_date']
    selected_time_str = context.user_data['selected_time']
    user_name = context.user_data['user_name_for_booking']
    
    confirmation_text = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n"
        f"üë§ **–ò–º—è:** {user_name}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone_number}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking_process")] 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
    return ConversationHandler.END 

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    query = update.callback_query
    await query.answer()

    selected_date_str = context.user_data.get('selected_date')
    selected_time_str = context.user_data.get('selected_time')
    user_name = context.user_data.get('user_name_for_booking')
    phone_number = context.user_data.get('phone_number')
    user_id = update.effective_user.id
    telegram_user_name = update.effective_user.full_name 

    if not all([selected_date_str, selected_time_str, user_name, phone_number]):
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        context.user_data.clear()
        return ConversationHandler.END

    selected_date_naive = datetime.date.fromisoformat(selected_date_str)
    selected_time_naive = datetime.time.fromisoformat(selected_time_str)
    selected_datetime_aware = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, selected_time_naive))
    now_aware = datetime.datetime.now(TIMEZONE)

    if selected_datetime_aware < now_aware - datetime.timedelta(minutes=1) or booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        context.user_data.clear()
        return ConversationHandler.END

    old_booking_key = context.user_data.get('old_booking_key') 
    old_booking_data = None
    if old_booking_key:
        old_date_str, old_time_str = old_booking_key.split('_')
        if old_date_str in booked_slots and old_time_str in booked_slots[old_date_str]:
            old_booking_data = booked_slots[old_date_str].pop(old_time_str)
            if not booked_slots[old_date_str]: 
                del booked_slots[old_date_str]
            logger.info(f"–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å {old_booking_key} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")

    if selected_date_str not in booked_slots:
        booked_slots[selected_date_str] = {}
    
    new_booking_data = {
        'user_id': user_id,
        'telegram_user_name': telegram_user_name, 
        'client_name': user_name,
        'phone_number': phone_number
    }
    booked_slots[selected_date_str][selected_time_str] = new_booking_data

    confirmation_message = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n"
        f"üìÖ **–î–∞—Ç–∞:** {selected_date_naive.strftime('%d.%m.%Y')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n"
        f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {phone_number}.\n\n"
        "–ñ–¥–µ–º –≤–∞—Å!"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    keyboard_after_confirm = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")] # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ]
    reply_markup_after_confirm = InlineKeyboardMarkup(keyboard_after_confirm)

    await query.edit_message_text(confirmation_message, reply_markup=reply_markup_after_confirm, parse_mode='Markdown')

    admin_booking_info = {
        "user_id": user_id,
        "user_name": user_name,
        "date": selected_date_naive,
        "time": selected_time_str,
        "phone_number": phone_number,
        "telegram_user_name": telegram_user_name,
        "client_name": user_name 
    }

    if old_booking_data:
        old_booking_for_admin = {
            'date': datetime.date.fromisoformat(old_date_str),
            'time': old_time_str,
            'client_name': old_booking_data.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'telegram_user_name': old_booking_data.get('telegram_user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'user_id': old_booking_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'phone_number': old_booking_data.get('phone_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        }
        await notify_admin_reschedule(context, old_booking_for_admin, admin_booking_info)
    else:
        await notify_admin_new_booking(context, admin_booking_info)

    context.user_data.clear() 
    return ConversationHandler.END

async def cancel_booking_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —Å–∞–º—É –∑–∞–ø–∏—Å—å)."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
    context.user_data.clear() 
    return ConversationHandler.END

async def cancel_booking_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /cancel."""
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start.")
    context.user_data.clear() 
    return ConversationHandler.END

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–Ø–ú–ò ---

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_bookings = []
    now_aware = datetime.datetime.now(TIMEZONE)

    for date_str, times in booked_slots.items():
        for time_str, booking_info in times.items():
            if booking_info.get('user_id') == user_id:
                booking_datetime_naive = datetime.datetime.combine(datetime.date.fromisoformat(date_str), datetime.time.fromisoformat(time_str))
                booking_datetime_aware = TIMEZONE.localize(booking_datetime_naive)
                
                if booking_datetime_aware >= now_aware - datetime.timedelta(minutes=1): 
                    user_bookings.append({
                        'date': date_str,
                        'time': time_str,
                        'info': booking_info,
                        'datetime_obj': booking_datetime_aware 
                    })
    
    if not user_bookings:
        keyboard = [[InlineKeyboardButton("üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data="book_appointment")]]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=reply_markup)
        return

    user_bookings.sort(key=lambda x: x['datetime_obj'])

    message_text = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
    keyboard = []
    for booking in user_bookings:
        date_str = booking['date']
        time_str = booking['time']
        booking_key = f"{date_str}_{time_str}" 
        
        message_text += (
            f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {time_str}\n"
            f"üë§ **–ò–º—è:** {booking['info'].get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {booking['info'].get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        )
        keyboard.append([
            InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {time_str} {datetime.date.fromisoformat(date_str).strftime('%d.%m')}", callback_data=f"cancel_specific_booking_{booking_key}"),
            InlineKeyboardButton(f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ {time_str} {datetime.date.fromisoformat(date_str).strftime('%d.%m')}", callback_data=f"reschedule_specific_booking_{booking_key}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def cancel_specific_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    await query.answer()

    booking_key = query.data.replace("cancel_specific_booking_", "") 
    date_str, time_str = booking_key.split('_')
    user_id = update.effective_user.id

    if date_str in booked_slots and time_str in booked_slots[date_str]:
        booking_info = booked_slots[date_str][time_str]
        
        if booking_info.get('user_id') == user_id:
            del booked_slots[date_str][time_str]
            if not booked_slots[date_str]: 
                del booked_slots[date_str]
            
            await query.edit_message_text(
                f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')} –≤ {time_str} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            
            admin_cancellation_info = {
                'user_id': user_id,
                'telegram_user_name': update.effective_user.full_name,
                'client_name': booking_info.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phone_number': booking_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'date': datetime.date.fromisoformat(date_str),
                'time': time_str
            }
            await notify_admin_cancellation(context, admin_cancellation_info)

        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–µ –≤–∞–º–∏.")
    else:
        await query.edit_message_text("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    await my_bookings(update, context) 

async def reschedule_specific_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: 
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    booking_key = query.data.replace("reschedule_specific_booking_", "")
    date_str, time_str = booking_key.split('_')
    user_id = update.effective_user.id

    if date_str in booked_slots and time_str in booked_slots[date_str]:
        booking_info = booked_slots[date_str][time_str]
        
        if booking_info.get('user_id') == user_id:
            context.user_data['old_booking_key'] = booking_key
            context.user_data['reschedule_mode'] = True
            context.user_data['user_name_for_booking'] = booking_info.get('client_name')
            context.user_data['phone_number'] = booking_info.get('phone_number')

            await query.edit_message_text(
                f"–í—ã –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')} –≤ {time_str}.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:"
            )
            # –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å –º—ã –≤—ã–∑—ã–≤–∞–µ–º book_appointment, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, 
            # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ CallbackQueryHandler.
            # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏) –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º booking_conv_handler.
            await book_appointment(update, context) 
            return ConversationHandler.END 
        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–µ –≤–∞–º–∏.")
    else:
        await query.edit_message_text("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    await my_bookings(update, context)
    return ConversationHandler.END 

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ä–µ–∂–∏–º –ø–µ—Ä–µ–Ω–æ—Å–∞
    await start(update, context) 

async def info_and_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    await query.answer()

    faq_text = (
        "**–û –Ω–∞—à–µ–º —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–µ:**\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. "
        "–ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π!\n\n"
        "**–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):**\n\n"
        "**‚ùì –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?**\n"
        "‚úÖ –ú—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω—Ç–∞–∂/–¥–µ–º–æ–Ω—Ç–∞–∂ —à–∏–Ω, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –∫–æ–ª–µ—Å, —Ä–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–æ–≤, —Å–µ–∑–æ–Ω–Ω—É—é —Å–º–µ–Ω—É —Ä–µ–∑–∏–Ω—ã, –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "**‚ùì –ö–∞–∫–æ–≤–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥?**\n"
        "‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–µ—Å. –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã:\n"
        "  - –°–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω—ã R13-R15: –æ—Ç 400 –≥—Ä–Ω\n"
        "  - –°–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω—ã R16-R18: –æ—Ç 600 –≥—Ä–Ω\n"
        "  - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: –æ—Ç 100 –≥—Ä–Ω/–∫–æ–ª–µ—Å–æ\n"
        "  - –†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞: –æ—Ç 150 –≥—Ä–Ω\n"
        "–î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        "**‚ùì –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂?**\n"
        "‚úÖ –û–±—ã—á–Ω–æ –ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞ —à–∏–Ω –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç. –†–µ–º–æ–Ω—Ç –æ–¥–Ω–æ–≥–æ –∫–æ–ª–µ—Å–∞ - 15-30 –º–∏–Ω—É—Ç.\n\n"
        "**‚ùì –ú–æ–≥—É –ª–∏ —è –ø—Ä–∏–µ—Ö–∞—Ç—å –±–µ–∑ –∑–∞–ø–∏—Å–∏?**\n"
        "‚úÖ –î–∞, –º–æ–∂–µ—Ç–µ, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
        "**‚ùì –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –æ–ø–∞–∑–¥—ã–≤–∞—é?**\n"
        "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! –ï—Å–ª–∏ –≤—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞.\n\n"
        "**–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:**\n"
        "–ü–Ω-–ü—Ç: 08:00 - 17:00\n"
        "–°–±-–í—Å: –í—ã—Ö–æ–¥–Ω–æ–π"
    )

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(faq_text, reply_markup=reply_markup, parse_mode='Markdown')

async def our_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞."""
    query = update.callback_query
    await query.answer()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –û–¥–µ—Å—Å—ã)
    latitude = 46.467890 # –ü—Ä–∏–º–µ—Ä: —à–∏—Ä–æ—Ç–∞
    longitude = 30.730300 # –ü—Ä–∏–º–µ—Ä: –¥–æ–ª–≥–æ—Ç–∞
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    address_text = "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –û–¥–µ—Å—Å–∞, —É–ª. –£—Å–ø–µ–Ω—Å–∫–∞—è, 1 (—ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!)\n\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=address_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
    await context.bot.send_location(
        chat_id=update.effective_chat.id, 
        latitude=latitude, 
        longitude=longitude
    )

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–ª–æ —ç—Ç–æ—Ç –∫–æ–ª–ª–±—ç–∫, —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è,
    # —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏.
    # –¢–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ –Ω–∞ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ò–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–æ–±—â–µ, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å.
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(update.message.text)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable not set. Exiting.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern="^book_appointment$"))
    application.add_handler(CallbackQueryHandler(select_date, pattern="^select_date_"))
    application.add_handler(CallbackQueryHandler(my_bookings, pattern="^my_bookings$")) 
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$")) 
    application.add_handler(CallbackQueryHandler(cancel_specific_booking, pattern="^cancel_specific_booking_")) 
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è FAQ –∏ –õ–æ–∫–∞—Ü–∏–∏
    application.add_handler(CallbackQueryHandler(info_and_faq, pattern="^info_and_faq$"))
    application.add_handler(CallbackQueryHandler(our_location, pattern="^our_location$"))
    
    # ConversationHandler –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    reschedule_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(reschedule_specific_booking, pattern="^reschedule_specific_booking_")],
        states={}, # –°–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º booking_conv_handler
        fallbacks=[CommandHandler("cancel", cancel_booking_command), CallbackQueryHandler(cancel_booking_process, pattern="^cancel_booking_process$")],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END 
        }
    )
    application.add_handler(reschedule_conv_handler)


    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    booking_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_time, pattern="^select_time_")], 
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)], 
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)], 
        },
        fallbacks=[CommandHandler("cancel", cancel_booking_command), CallbackQueryHandler(cancel_booking_process, pattern="^cancel_booking_process$")], 
    )
    application.add_handler(booking_conv_handler)
    
    application.add_handler(CallbackQueryHandler(confirm_booking, pattern="^confirm_booking$"))
    
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo)) 

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
