import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
)
import datetime
import os 
import pytz # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç pytz –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
# –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ Railway,
# —Ç–æ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å.
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7646808754:AAFEd_-JuxKF7jy4_xbRvolfDBbbCHy6Tt8") 
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ADMIN_USER_ID –≤ int. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Ç–æ None.
try:
    ADMIN_CHAT_ID = int(os.environ.get("ADMIN_USER_ID", "7285220061"))
except (ValueError, TypeError):
    ADMIN_CHAT_ID = None 
    logging.warning("ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã - 'Europe/Kiev')
# –í–∞–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —Å–ª–æ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å
TIMEZONE = pytz.timezone('Europe/Kiev') 

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
ASK_NAME, ASK_PHONE = range(2)
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
RESCHEDULE_SELECT_DATE, RESCHEDULE_SELECT_TIME = range(2, 4) # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª–æ—Å—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏

# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
# –§–æ—Ä–º–∞—Ç: {–¥–∞—Ç–∞: {–≤—Ä–µ–º—è: {'user_id': ..., 'telegram_user_name': ..., 'client_name': ..., 'phone_number': ...}}}
booked_slots = {}

async def notify_admin_new_booking(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"üîî **–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {booking_info.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} "
        f"(Telegram: {booking_info.get('telegram_user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, ID: {booking_info['user_id']})\n"
        f"**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {booking_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"**–î–∞—Ç–∞:** {booking_info['date'].strftime('%d.%m.%Y')}\n"
        f"**–í—Ä–µ–º—è:** {booking_info['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def notify_admin_cancellation(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"‚ùå **–û–¢–ú–ï–ù–ê –ó–ê–ü–ò–°–ò!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {booking_info.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} "
        f"(Telegram: {booking_info.get('telegram_user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, ID: {booking_info['user_id']})\n"
        f"**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {booking_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"**–û—Ç–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞:** {booking_info['date'].strftime('%d.%m.%Y')}\n"
        f"**–û—Ç–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è:** {booking_info['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def notify_admin_reschedule(context: ContextTypes.DEFAULT_TYPE, old_booking: dict, new_booking: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"üîÑ **–ü–ï–†–ï–ù–û–° –ó–ê–ü–ò–°–ò!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {new_booking.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} "
        f"(Telegram: {new_booking.get('telegram_user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, ID: {new_booking['user_id']})\n"
        f"**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {new_booking.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"**–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å:**\n"
        f"  –î–∞—Ç–∞: {old_booking['date'].strftime('%d.%m.%Y')}\n"
        f"  –í—Ä–µ–º—è: {old_booking['time']}\n\n"
        f"**–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:**\n"
        f"  –î–∞—Ç–∞: {new_booking['date'].strftime('%d.%m.%Y')}\n"
        f"  –í—Ä–µ–º—è: {new_booking['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π."""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É. "
        "–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏?"
    )
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data="book_appointment")],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")] # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    keyboard = []
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    now_aware = datetime.datetime.now(TIMEZONE)
    today_in_tz = now_aware.date() 
    
    for i in range(7):  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        date = today_in_tz + datetime.timedelta(days=i)
        keyboard.append(
            [InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=f"select_date_{date.isoformat()}")]
        )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    selected_date_str = query.data.replace("select_date_", "")
    selected_date_naive = datetime.date.fromisoformat(selected_date_str) # –î–∞—Ç–∞ –±–µ–∑ TZ

    keyboard = []
    start_time = datetime.time(8, 0) # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ 8:00
    end_time = datetime.time(17, 0)  # –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –≤ 17:00
    interval = datetime.timedelta(minutes=30)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    now_aware = datetime.datetime.now(TIMEZONE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç –∫–∞–∫ offset-aware datetime
    current_slot_datetime = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, start_time))
    
    while current_slot_datetime.time() <= end_time:
        slot_str = current_slot_datetime.strftime("%H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
        # –¢–µ–ø–µ—Ä—å booked_slots —Ö—Ä–∞–Ω–∏—Ç —Å–ª–æ–≤–∞—Ä—å, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
        is_booked = booked_slots.get(selected_date_str, {}).get(slot_str) is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º offset-aware datetime –æ–±—ä–µ–∫—Ç—ã
        is_past_slot = (current_slot_datetime < now_aware - datetime.timedelta(minutes=1)) # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é "—Ñ–æ—Ä—É"
        
        button_text = f"{slot_str}"
        if is_booked:
            button_text += " (–ó–∞–Ω—è—Ç–æ)"
        elif is_past_slot:
            button_text += " (–ü—Ä–æ—à–ª–æ)" 

        callback_data_prefix = "select_time"
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞, –º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å callback_data
        if context.user_data.get('reschedule_mode'):
            callback_data_prefix = "reschedule_time"

        callback_data = f"{callback_data_prefix}_{selected_date_str}_{slot_str}"
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç –∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º
        is_disabled = is_booked or is_past_slot

        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=callback_data if not is_disabled else "ignore")] 
        )
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç —Ç–∞–∫–∂–µ –≤ offset-aware
        current_slot_datetime += interval

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –∏–ª–∏ –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º
    if context.user_data.get('reschedule_mode'):
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")])
    else:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="book_appointment")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {selected_date_naive.strftime('%d.%m.%Y')}:",
        reply_markup=reply_markup
    )

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: 
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    query = update.callback_query
    await query.answer()

    if query.data == "ignore": 
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.") 
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞

    parts = query.data.split("_")
    selected_date_str = parts[2]
    selected_time_str = parts[3]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_data)
    context.user_data['selected_date'] = selected_date_str
    context.user_data['selected_time'] = selected_time_str

    # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç –ø—Ä–æ—à–µ–¥—à–∏–º –∏–ª–∏ –∑–∞–Ω—è—Ç—ã–º –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    selected_date_naive = datetime.date.fromisoformat(selected_date_str)
    selected_time_naive = datetime.time.fromisoformat(selected_time_str)
    selected_datetime_aware = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, selected_time_naive))

    now_aware = datetime.datetime.now(TIMEZONE)

    if selected_datetime_aware < now_aware - datetime.timedelta(minutes=1): 
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return ConversationHandler.END
    
    if booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ—Å–∏–º –∏–º—è
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω'):")
    return ASK_NAME # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ASK_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_name = update.message.text
    if not user_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return ASK_NAME # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ

    context.user_data['user_name_for_booking'] = user_name # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '+380–•–•–•–•–•–•–•–•–•') –¥–ª—è —Å–≤—è–∑–∏. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )
    return ASK_PHONE # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ASK_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å."""
    phone_number = update.message.text
    if not phone_number:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return ASK_PHONE # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—É—Å—Ç–æ–π

    context.user_data['phone_number'] = phone_number # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    selected_date_str = context.user_data['selected_date']
    selected_time_str = context.user_data['selected_time']
    user_name = context.user_data['user_name_for_booking']
    
    confirmation_text = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n"
        f"üë§ **–ò–º—è:** {user_name}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone_number}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking_process")] # –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞, –Ω–µ –∑–∞–ø–∏—Å–∏
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
    return ConversationHandler.END 

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    query = update.callback_query
    await query.answer()

    selected_date_str = context.user_data.get('selected_date')
    selected_time_str = context.user_data.get('selected_time')
    user_name = context.user_data.get('user_name_for_booking')
    phone_number = context.user_data.get('phone_number')
    user_id = update.effective_user.id
    telegram_user_name = update.effective_user.full_name # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—á–µ–º—É-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å (—Ö–æ—Ç—è –≤—Ä—è–¥ –ª–∏)
    if not all([selected_date_str, selected_time_str, user_name, phone_number]):
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        return ConversationHandler.END

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    selected_date_naive = datetime.date.fromisoformat(selected_date_str)
    selected_time_naive = datetime.time.fromisoformat(selected_time_str)
    selected_datetime_aware = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, selected_time_naive))
    now_aware = datetime.datetime.now(TIMEZONE)

    if selected_datetime_aware < now_aware - datetime.timedelta(minutes=1) or booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
    old_booking_key = context.user_data.get('old_booking_key') # 'YYYY-MM-DD_HH:MM'
    old_booking_data = None
    if old_booking_key:
        old_date_str, old_time_str = old_booking_key.split('_')
        if old_date_str in booked_slots and old_time_str in booked_slots[old_date_str]:
            old_booking_data = booked_slots[old_date_str].pop(old_time_str)
            if not booked_slots[old_date_str]: # –ï—Å–ª–∏ –¥–µ–Ω—å —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º
                del booked_slots[old_date_str]
            logger.info(f"–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å {old_booking_key} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")

    # –ë—Ä–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
    if selected_date_str not in booked_slots:
        booked_slots[selected_date_str] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    new_booking_data = {
        'user_id': user_id,
        'telegram_user_name': telegram_user_name, 
        'client_name': user_name,
        'phone_number': phone_number
    }
    booked_slots[selected_date_str][selected_time_str] = new_booking_data

    confirmation_message = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n"
        f"üìÖ **–î–∞—Ç–∞:** {selected_date_naive.strftime('%d.%m.%Y')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n"
        f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {phone_number}.\n\n"
        "–ñ–¥–µ–º –≤–∞—Å!"
    )
    await query.edit_message_text(confirmation_message, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_booking_info = {
        "user_id": user_id,
        "user_name": user_name,
        "date": selected_date_naive,
        "time": selected_time_str,
        "phone_number": phone_number,
        "telegram_user_name": telegram_user_name,
        "client_name": user_name # –î–æ–±–∞–≤–ª—è–µ–º client_name –¥–ª—è notify_admin_new_booking
    }

    if old_booking_data:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
        old_booking_for_admin = {
            'date': datetime.date.fromisoformat(old_date_str),
            'time': old_time_str,
            'client_name': old_booking_data.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'telegram_user_name': old_booking_data.get('telegram_user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'user_id': old_booking_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'phone_number': old_booking_data.get('phone_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        }
        await notify_admin_reschedule(context, old_booking_for_admin, admin_booking_info)
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        await notify_admin_new_booking(context, admin_booking_info)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
    context.user_data.clear() 
    return ConversationHandler.END

async def cancel_booking_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —Å–∞–º—É –∑–∞–ø–∏—Å—å)."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return ConversationHandler.END

async def cancel_booking_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /cancel."""
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start.")
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return ConversationHandler.END

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–Ø–ú–ò ---

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_bookings = []
    now_aware = datetime.datetime.now(TIMEZONE)

    # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for date_str, times in booked_slots.items():
        for time_str, booking_info in times.items():
            if booking_info.get('user_id') == user_id:
                booking_datetime_naive = datetime.datetime.combine(datetime.date.fromisoformat(date_str), datetime.time.fromisoformat(time_str))
                booking_datetime_aware = TIMEZONE.localize(booking_datetime_naive)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏
                if booking_datetime_aware >= now_aware - datetime.timedelta(minutes=1): # –° –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–æ—Ä–æ–π
                    user_bookings.append({
                        'date': date_str,
                        'time': time_str,
                        'info': booking_info,
                        'datetime_obj': booking_datetime_aware # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    })
    
    if not user_bookings:
        keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data="book_appointment")]]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=reply_markup)
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    user_bookings.sort(key=lambda x: x['datetime_obj'])

    message_text = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
    keyboard = []
    for booking in user_bookings:
        date_str = booking['date']
        time_str = booking['time']
        booking_key = f"{date_str}_{time_str}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å–∏
        
        message_text += (
            f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {time_str}\n"
            f"üë§ **–ò–º—è:** {booking['info'].get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {booking['info'].get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        )
        keyboard.append([
            InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {time_str} {datetime.date.fromisoformat(date_str).strftime('%d.%m')}", callback_data=f"cancel_specific_booking_{booking_key}"),
            InlineKeyboardButton(f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ {time_str} {datetime.date.fromisoformat(date_str).strftime('%d.%m')}", callback_data=f"reschedule_specific_booking_{booking_key}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def cancel_specific_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    await query.answer()

    booking_key = query.data.replace("cancel_specific_booking_", "") # YYYY-MM-DD_HH:MM
    date_str, time_str = booking_key.split('_')
    user_id = update.effective_user.id

    if date_str in booked_slots and time_str in booked_slots[date_str]:
        booking_info = booked_slots[date_str][time_str]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª
        if booking_info.get('user_id') == user_id:
            del booked_slots[date_str][time_str]
            if not booked_slots[date_str]: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, —É–¥–∞–ª—è–µ–º –¥–µ–Ω—å
                del booked_slots[date_str]
            
            await query.edit_message_text(
                f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')} –≤ {time_str} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ
            admin_cancellation_info = {
                'user_id': user_id,
                'telegram_user_name': update.effective_user.full_name,
                'client_name': booking_info.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'phone_number': booking_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'date': datetime.date.fromisoformat(date_str),
                'time': time_str
            }
            await notify_admin_cancellation(context, admin_cancellation_info)

        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–µ –≤–∞–º–∏.")
    else:
        await query.edit_message_text("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    await my_bookings(update, context) # –í—ã–∑—ã–≤–∞–µ–º my_bookings –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞

async def reschedule_specific_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    booking_key = query.data.replace("reschedule_specific_booking_", "") # YYYY-MM-DD_HH:MM
    date_str, time_str = booking_key.split('_')
    user_id = update.effective_user.id

    if date_str in booked_slots and time_str in booked_slots[date_str]:
        booking_info = booked_slots[date_str][time_str]
        
        if booking_info.get('user_id') == user_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–Ω–æ—Å–∞
            context.user_data['old_booking_key'] = booking_key
            context.user_data['reschedule_mode'] = True
            context.user_data['user_name_for_booking'] = booking_info.get('client_name')
            context.user_data['phone_number'] = booking_info.get('phone_number')

            await query.edit_message_text(
                f"–í—ã –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')} –≤ {time_str}.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:"
            )
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
            await book_appointment(update, context)
            return RESCHEDULE_SELECT_DATE # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–µ –≤–∞–º–∏.")
    else:
        await query.edit_message_text("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º
    await my_bookings(update, context)


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await start(update, context) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(update.message.text)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable not set. Exiting.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern="^book_appointment$"))
    application.add_handler(CallbackQueryHandler(select_date, pattern="^select_date_"))
    application.add_handler(CallbackQueryHandler(my_bookings, pattern="^my_bookings$")) # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$")) # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(CallbackQueryHandler(cancel_specific_booking, pattern="^cancel_specific_booking_")) # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(CallbackQueryHandler(reschedule_specific_booking, pattern="^reschedule_specific_booking_")) # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_time, pattern="^select_time_")], # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)], # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)], # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        },
        fallbacks=[CommandHandler("cancel", cancel_booking_command), CallbackQueryHandler(cancel_booking_process, pattern="^cancel_booking_process$")], # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    )
    application.add_handler(conv_handler)

    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏)
    # Entry point –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ reschedule_specific_booking,
    # –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç book_appointment –∏ select_date —Å —Ñ–ª–∞–≥–æ–º reschedule_mode.
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏,
    # –∞ –∑–∞—Ç–µ–º –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –æ–±—ã—á–Ω—ã–π ASK_NAME/ASK_PHONE.
    # –ü–æ—ç—Ç–æ–º—É –æ—Ç–¥–µ–ª—å–Ω—ã–π ConversationHandler –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º ASK_NAME/ASK_PHONE.
    # –ù–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –±—ã –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –±—ã–ª–∞ —Å–ª–æ–∂–Ω–µ–µ, –æ–Ω –±—ã –ø—Ä–∏–≥–æ–¥–∏–ª—Å—è.
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—Ü–µ—Å—Å –∏–¥–µ—Ç —á–µ—Ä–µ–∑ confirm_booking,
    # –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç old_booking_key –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å.

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ConversationHandler
    application.add_handler(CallbackQueryHandler(confirm_booking, pattern="^confirm_booking$"))
    # CallbackQueryHandler(cancel_booking_process, pattern="^cancel_booking_process$") —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ fallbacks conv_handler
    
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo)) # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

