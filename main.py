import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)
import datetime
import os 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
# –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ Railway,
# —Ç–æ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å.
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7646808754:AAFEd_-JuxKF7jy4_xbRvolfDBbbCHy6Tt8") 
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ADMIN_USER_ID –≤ int. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Ç–æ None.
try:
    ADMIN_CHAT_ID = int(os.environ.get("ADMIN_USER_ID", "7285220061"))
except (ValueError, TypeError):
    ADMIN_CHAT_ID = None # –£—Å—Ç–∞–Ω–æ–≤–∏–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
    logging.warning("ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
# –§–æ—Ä–º–∞—Ç: {–¥–∞—Ç–∞: {–≤—Ä–µ–º—è: id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}}
booked_slots = {}

async def notify_admin_new_booking(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    message = (
        f"üîî **–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!**\n\n"
        f"**–ö–ª–∏–µ–Ω—Ç:** {booking_info['user_name']} (ID: {booking_info['user_id']})\n"
        f"**–î–∞—Ç–∞:** {booking_info['date'].strftime('%d.%m.%Y')}\n"
        f"**–í—Ä–µ–º—è:** {booking_info['time']}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø–∏—Å–∏."""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É. "
        "–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è?"
    )
    keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data="book_appointment")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    keyboard = []
    today = datetime.date.today()
    for i in range(7):  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        date = today + datetime.timedelta(days=i)
        keyboard.append(
            [InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=f"select_date_{date.isoformat()}")]
        )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    selected_date_str = query.data.replace("select_date_", "")
    selected_date = datetime.date.fromisoformat(selected_date_str)

    keyboard = []
    start_time = datetime.time(8, 0) # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ 8:00
    end_time = datetime.time(17, 0)  # –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –≤ 17:00
    interval = datetime.timedelta(minutes=30)

    current_time_slot = datetime.datetime.combine(selected_date, start_time)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    now = datetime.datetime.now(datetime.timezone.utc).astimezone() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    
    while current_time_slot.time() <= end_time:
        slot_datetime = datetime.datetime.combine(selected_date, current_time_slot.time())
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è, –∏ —Å–ª–æ—Ç —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.timedelta(minutes=1) –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–π "—Ñ–æ—Ä—ã"
        is_past_slot = (selected_date == now.date() and slot_datetime < now - datetime.timedelta(minutes=1))
        
        slot_str = current_time_slot.strftime("%H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
        is_booked = booked_slots.get(selected_date_str, {}).get(slot_str) is not None
        
        button_text = f"{slot_str}"
        if is_booked:
            button_text += " (–ó–∞–Ω—è—Ç–æ)"
        elif is_past_slot:
            button_text += " (–ü—Ä–æ—à–ª–æ)" # –ú–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–ª–æ—Ç–æ–≤

        callback_data = f"select_time_{selected_date_str}_{slot_str}"
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç –∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º
        is_disabled = is_booked or is_past_slot

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É. –ï—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, callback_data –±—É–¥–µ—Ç "ignore"
        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=callback_data if not is_disabled else "ignore")] 
        )
        current_time_slot += interval

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="book_appointment")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:",
        reply_markup=reply_markup
    )

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    await query.answer()

    if query.data == "ignore": # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ "–∑–∞–Ω—è—Ç–æ" –∏–ª–∏ "–ø—Ä–æ—à–ª–æ"
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return

    parts = query.data.split("_")
    selected_date_str = parts[2]
    selected_time_str = parts[3]
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name

    # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç –ø—Ä–æ—à–µ–¥—à–∏–º –∏–ª–∏ –∑–∞–Ω—è—Ç—ã–º –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    selected_datetime_obj = datetime.datetime.combine(datetime.date.fromisoformat(selected_date_str), datetime.time.fromisoformat(selected_time_str))
    now = datetime.datetime.now(datetime.timezone.utc).astimezone() # –í—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º TZ

    if selected_datetime_obj < now - datetime.timedelta(minutes=1): # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é "—Ñ–æ—Ä—É" –≤ 1 –º–∏–Ω—É—Ç—É
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    
    if booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return


    # –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω –∏ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º, –±—Ä–æ–Ω–∏—Ä—É–µ–º
    if selected_date_str not in booked_slots:
        booked_slots[selected_date_str] = {}
    booked_slots[selected_date_str][selected_time_str] = user_id

    confirmation_message = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂:\n\n"
        f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n\n"
        "–ñ–¥–µ–º –≤–∞—Å!"
    )
    await query.edit_message_text(confirmation_message, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    booking_info = {
        "user_id": user_id,
        "user_name": user_name,
        "date": datetime.date.fromisoformat(selected_date_str),
        "time": selected_time_str
    }
    await notify_admin_new_booking(context, booking_info)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(update.message.text)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable not set. Exiting.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern="^book_appointment$"))
    application.add_handler(CallbackQueryHandler(select_date, pattern="^select_date_"))
    application.add_handler(CallbackQueryHandler(select_time, pattern="^select_time_"))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
