import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
# –§–æ—Ä–º–∞—Ç: {–¥–∞—Ç–∞: {–≤—Ä–µ–º—è: id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}}
booked_slots = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø–∏—Å–∏."""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É. "
        "–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è?"
    )
    keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data="book_appointment")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    keyboard = []
    today = datetime.date.today()
    for i in range(7):  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        date = today + datetime.timedelta(days=i)
        keyboard.append(
            [InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=f"select_date_{date.isoformat()}")]
        )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    selected_date_str = query.data.replace("select_date_", "")
    selected_date = datetime.date.fromisoformat(selected_date_str)

    keyboard = []
    start_time = datetime.time(8, 0) # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ 8:00
    end_time = datetime.time(17, 0)  # –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –≤ 17:00
    interval = datetime.timedelta(minutes=30)

    current_time_slot = datetime.datetime.combine(selected_date, start_time)

    while current_time_slot.time() <= end_time:
        slot_str = current_time_slot.strftime("%H:%M")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
        is_booked = booked_slots.get(selected_date_str, {}).get(slot_str) is not None
        
        button_text = f"{slot_str}"
        if is_booked:
            button_text += " (–ó–∞–Ω—è—Ç–æ)"
            
        callback_data = f"select_time_{selected_date_str}_{slot_str}"
        
        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=callback_data, 
                                  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç
                                  callback_data=callback_data if not is_booked else "ignore")] 
        )
        current_time_slot += interval

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="book_appointment")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:",
        reply_markup=reply_markup
    )

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    await query.answer()

    if query.data == "ignore": # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ "–∑–∞–Ω—è—Ç–æ"
        return

    parts = query.data.split("_")
    selected_date_str = parts[2]
    selected_time_str = parts[3]
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if booked_slots.get(selected_date_str, {}).get(selected_time_str) is None:
        if selected_date_str not in booked_slots:
            booked_slots[selected_date_str] = {}
        booked_slots[selected_date_str][selected_time_str] = user_id

        confirmation_message = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂:\n\n"
            f"üìÖ **–î–∞—Ç–∞:** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {selected_time_str}\n\n"
            "–ñ–¥–µ–º –≤–∞—Å!"
        )
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await query.edit_message_text(confirmation_message, parse_mode='Markdown')
    else:
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(update.message.text)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Application builder –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ python-telegram-bot
    application = Application.builder().token("YOUR_BOT_TOKEN").build() # !!! –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù –ò–õ–ò –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï OS.ENVIRON.GET !!!

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern="^book_appointment$"))
    application.add_handler(CallbackQueryHandler(select_date, pattern="^select_date_"))
    application.add_handler(CallbackQueryHandler(select_time, pattern="^select_time_"))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
