import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    JobQueue # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
)
import datetime
import os
import pytz

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN") 

try:
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_ADMIN_CHAT_ID (–∫–∞–∫ –≤—ã –µ—ë –Ω–∞–∑–≤–∞–ª–∏ –≤ Railway)
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–∞—à ID)
    ADMIN_CHAT_ID = int(os.environ.get("TELEGRAM_ADMIN_CHAT_ID", "7285220061")) 
except (ValueError, TypeError):
    ADMIN_CHAT_ID = None
    logging.warning("TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

TIMEZONE = pytz.timezone('Europe/Kiev') 

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
ASK_NAME, ASK_PHONE = range(2)
RESCHEDULE_SELECT_DATE, RESCHEDULE_SELECT_TIME = range(2, 4) 

# --- –ù–û–í–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê –î–õ–Ø –°–°–´–õ–ö–ò –ù–ê –ö–ê–ù–ê–õ –û–¢–ó–´–í–û–í ---
REVIEWS_CHANNEL_LINK = "https://t.me/+Qca52HCOurI0MmRi"

# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# booked_slots —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
# –§–æ—Ä–º–∞—Ç: { "YYYY-MM-DD": { "HH:MM": { ..., "job_name": "unique_job_id" } } }
booked_slots = {}

# --- –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í ---
# –í—Å–µ —Ç–µ–∫—Å—Ç—ã –±–æ—Ç–∞ —Å–æ–±—Ä–∞–Ω—ã –∑–¥–µ—Å—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
translations = {
    'ru': {
        'choose_language': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'lang_button_ru': "–†—É—Å—Å–∫–∏–π",
        'lang_button_uk': "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        'welcome_message': (
            "–ü—Ä–∏–≤–µ—Ç, {user_full_name}! üëã\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞!\n"
            "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–±–æ—Ç–∞ –æ —à–∏–Ω–∞—Ö –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ *—É–¥–æ–±–Ω–æ–π –∏ –±–µ–∑–∑–∞–±–æ—Ç–Ω–æ–π*. ‚ú®\n\n"
            "–ó–∞–±—É–¥—å—Ç–µ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö –∏ –∑–≤–æ–Ω–∫–∞—Ö! –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üóìÔ∏è **–ë—ã—Å—Ç—Ä–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è** –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            "üìã **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏** —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.\n"
            "‚ÑπÔ∏è **–ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é** –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ —à–∏–Ω—ã –≤ –ø–æ—Ä—è–¥–æ–∫?\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        ),
        'btn_book_appointment': "üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
        'btn_my_bookings': "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
        'btn_info_and_faq': "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ FAQ",
        'btn_our_location': "üìç –ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        'btn_main_menu': "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        # --- –ù–û–í–´–ï –ü–ï–†–ï–í–û–î–´ –î–õ–Ø –û–¢–ó–´–í–û–í ---
        'btn_reviews': "‚≠ê –û—Ç–∑—ã–≤—ã",
        'reviews_message': (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É!\n\n"
            "–ú—ã —Ü–µ–Ω–∏–º –º–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:"
        ),
        'btn_go_to_reviews_channel': "–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–ï–†–ï–í–û–î–û–í ---
        'select_day_for_booking': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        'select_time_for_booking': "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {date}:",
        'time_unavailable': "–≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
        'time_passed': "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
        'time_booked': "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
        'enter_name': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω'):",
        'name_incorrect': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        'enter_phone': (
            "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '+380–•–•–•–•–•–•–•–•–•') –¥–ª—è —Å–≤—è–∑–∏. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        ),
        'phone_incorrect': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        'check_data': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
        'date_label': "–î–∞—Ç–∞:",
        'time_label': "–í—Ä–µ–º—è:",
        'name_label': "–ò–º—è:",
        'phone_label': "–¢–µ–ª–µ—Ñ–æ–Ω:",
        'all_correct': "–í—Å–µ –≤–µ—Ä–Ω–æ?",
        'btn_confirm': "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        'btn_cancel_process': "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        'error_try_again': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
        'booking_confirmed': (
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n"
            "üìÖ **–î–∞—Ç–∞:** {date_formatted}\n"
            "‚è∞ **–í—Ä–µ–º—è:** {time}\n"
            "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {phone_number}.\n\n"
            "–ñ–¥–µ–º –≤–∞—Å!"
        ),
        'process_cancelled': "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
        'no_active_bookings': "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        'your_current_bookings': "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n",
        'btn_cancel_booking': "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {time} {date}",
        'btn_reschedule_booking': "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ {time} {date}",
        'not_your_booking_cancel': "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–µ –≤–∞–º–∏.",
        'booking_not_found': "–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        'booking_cancelled_success': "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_formatted} –≤ {time} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        'reschedule_intro': (
            "–í—ã –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ {old_date_formatted} –≤ {old_time}.\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:"
        ),
        'not_your_booking_reschedule': "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–µ –≤–∞–º–∏.",
        'faq_title': "**–û –Ω–∞—à–µ–º —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–µ:**",
        'faq_text': (
            "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. "
            "–ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π!\n\n"
            "**–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):**\n\n"
            "**‚ùì –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?**\n"
            "‚úÖ –ú—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω—Ç–∞–∂/–¥–µ–º–æ–Ω—Ç–∞–∂ —à–∏–Ω, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –∫–æ–ª–µ—Å, —Ä–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–æ–≤, —Å–µ–∑–æ–Ω–Ω—É—é —Å–º–µ–Ω—É —Ä–µ–∑–∏–Ω—ã, –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "**‚ùì –ö–∞–∫–æ–≤–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥?**\n"
            "‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–µ—Å. –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã:\n"
            "  - –°–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω—ã R13-R15: –æ—Ç 400 –≥—Ä–Ω\n"
            "  - –°–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω—ã R16-R18: –æ—Ç 600 –≥—Ä–Ω\n"
            "  - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: –æ—Ç 100 –≥—Ä–Ω/–∫–æ–ª–µ—Å–æ\n"
            "  - –†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞: –æ—Ç 150 –≥—Ä–Ω\n"
            "–î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
            "**‚ùì –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂?**\n"
            "‚úÖ –û–±—ã—á–Ω–æ –ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞ —à–∏–Ω –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç. –†–µ–º–æ–Ω—Ç –æ–¥–Ω–æ–≥–æ –∫–æ–ª–µ—Å–∞ - 15-30 –º–∏–Ω—É—Ç.\n\n"
            "**‚ùì –ú–æ–≥—É –ª–∏ —è –ø—Ä–∏–µ—Ö–∞—Ç—å –±–µ–∑ –∑–∞–ø–∏—Å–∏?**\n"
            "‚úÖ –î–∞, –º–æ–∂–µ—Ç–µ, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
            "**‚ùì –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –æ–ø–∞–∑–¥—ã–≤–∞—é?**\n"
            "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! –ï—Å–ª–∏ –≤—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞.\n\n"
            "**–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:**\n"
            "–ü–Ω-–ü—Ç: 08:00 - 17:00\n"
            "–°–±-–í—Å: –í—ã—Ö–æ–¥–Ω–æ–π"
        ),
        'our_location_address': "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –û–¥–µ—Å—Å–∞, —É–ª. –£—Å–ø–µ–Ω—Å–∫–∞—è, 1 (—ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!)\n\n",
        'help_message': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        'admin_new_booking': (
            "üîî **–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!**\n\n"
            "**–ö–ª–∏–µ–Ω—Ç:** {client_name} (Telegram: {telegram_user_name}, ID: {user_id})\n"
            "**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {phone_number}\n"
            "**–î–∞—Ç–∞:** {date_formatted}\n"
            "**–í—Ä–µ–º—è:** {time}"
        ),
        'admin_cancellation': (
            "‚ùå **–û–¢–ú–ï–ù–ê –ó–ê–ü–ò–°–ò!**\n\n"
            "**–ö–ª–∏–µ–Ω—Ç:** {client_name} (Telegram: {telegram_user_name}, ID: {user_id})\n"
            "**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {phone_number}\n"
            "**–û—Ç–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞:** {date_formatted}\n"
            "**–û—Ç–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è:** {time}"
        ),
        'admin_reschedule': (
            "üîÑ **–ü–ï–†–ï–ù–û–° –ó–ê–ü–ò–°–ò!**\n\n"
            "**–ö–ª–∏–µ–Ω—Ç:** {client_name} (Telegram: {telegram_user_name}, ID: {user_id})\n"
            "**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {phone_number}\n\n"
            "**–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å:**\n"
            "  –î–∞—Ç–∞: {old_date_formatted}\n"
            "  –í—Ä–µ–º—è: {old_time}\n\n"
            "**–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:**\n"
            "  –î–∞—Ç–∞: {new_date_formatted}\n"
            "  –í—Ä–µ–º—è: {new_time}"
        ),
        'not_specified': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        'not_specified_phone': "–ù–µ —É–∫–∞–∑–∞–Ω",
        'unknown': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        'past_slot': " (–ü—Ä–æ—à–ª–æ)",
        'booked_slot': " (–ó–∞–Ω—è—Ç–æ)",
        'back_to_day_select': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è",
        'back_to_my_bookings': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º",
        'reminder_message': "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –∑–∞–≤—Ç—Ä–∞, {date_formatted} –≤ {time}. –ñ–¥–µ–º –≤–∞—Å!",
        'rescheduled_successfully_message': "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {date_formatted} –≤ {time}."
    },
    'uk': {
        'choose_language': "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:\nPlease choose your language:",
        'lang_button_ru': "–†–æ—Å—ñ–π—Å—å–∫–∞",
        'lang_button_uk': "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        'welcome_message': (
            "–ü—Ä–∏–≤—ñ—Ç, {user_full_name}! üëã\n\n"
            "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ —É —Å–≤—ñ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Ç–∞ —à–≤–∏–¥–∫–æ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É!\n"
            "–Ø ‚Äî –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ç—É—Ä–±–æ—Ç–∞ –ø—Ä–æ —à–∏–Ω–∏ –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –±—É–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ *–∑—Ä—É—á–Ω–æ—é —Ç–∞ –±–µ–∑—Ç—É—Ä–±–æ—Ç–Ω–æ—é*. ‚ú®\n\n"
            "–ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —á–µ—Ä–≥–∏ —Ç–∞ –¥–∑–≤—ñ–Ω–∫–∏! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
            "üóìÔ∏è **–®–≤–∏–¥–∫–æ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è** –Ω–∞ –∑—Ä—É—á–Ω–∏–π —á–∞—Å.\n"
            "üìã **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏** —Å–≤–æ—ó –∑–∞–ø–∏—Å–∏.\n"
            "‚ÑπÔ∏è **–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é** –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏.\n\n"
            "–ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å–≤–æ—ó —à–∏–Ω–∏ –¥–æ –ª–∞–¥—É?\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!"
        ),
        'btn_book_appointment': "üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
        'btn_my_bookings': "üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏",
        'btn_info_and_faq': "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ FAQ",
        'btn_our_location': "üìç –ù–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
        'btn_main_menu': "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        # --- –ù–û–í–´–ï –ü–ï–†–ï–í–û–î–´ –î–õ–Ø –û–¢–ó–´–í–û–í ---
        'btn_reviews': "‚≠ê –í—ñ–¥–≥—É–∫–∏",
        'reviews_message': (
            "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–æ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É!\n\n"
            "–ú–∏ —Ü—ñ–Ω—É—î–º–æ –¥—É–º–∫—É –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞. –í–∞—à—ñ –≤—ñ–¥–≥—É–∫–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –Ω–∞–º —Å—Ç–∞–≤–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å–µ—Ä–≤—ñ—Å—É.\n\n"
            "–©–æ–± –ø–æ—á–∏—Ç–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ —ñ–Ω—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤—ñ–π, –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –∑–∞ –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ:"
        ),
        'btn_go_to_reviews_channel': "–ù–∞—à—ñ –≤—ñ–¥–≥—É–∫–∏ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó",
        # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–ï–†–ï–í–û–î–û–í ---
        'select_day_for_booking': "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å—É:",
        'select_time_for_booking': "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ {date}:",
        'time_unavailable': "–¶–µ–π —á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.",
        'time_passed': "–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.",
        'time_booked': "–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.",
        'enter_name': "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–Ü–≤–∞–Ω'):",
        'name_incorrect': "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –∫–æ—Ä–µ–∫—Ç–Ω–æ.",
        'enter_phone': (
            "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '+380–•–•–•–•–•–•–•–•–•') –¥–ª—è –∑–≤'—è–∑–∫—É. "
            "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Å —Ç–∞ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ."
        ),
        'phone_incorrect': "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–µ–∫—Ç–Ω–æ.",
        'check_data': "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:",
        'date_label': "–î–∞—Ç–∞:",
        'time_label': "–ß–∞—Å:",
        'name_label': "–Ü–º'—è:",
        'phone_label': "–¢–µ–ª–µ—Ñ–æ–Ω:",
        'all_correct': "–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        'btn_confirm': "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
        'btn_cancel_process': "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        'error_try_again': "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
        'booking_confirmed': (
            "‚úÖ –ß—É–¥–æ–≤–æ, {user_name}! –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n"
            "üìÖ **–î–∞—Ç–∞:** {date_formatted}\n"
            "‚è∞ **–ß–∞—Å:** {time}\n"
            "üìû –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {phone_number}.\n\n"
            "–ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—Å!"
        ),
        'process_cancelled': "–ü—Ä–æ—Ü–µ—Å –∑–∞–ø–∏—Å—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è /start.",
        'no_active_bookings': "–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤. –ë–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è?",
        'your_current_bookings': "–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Å–∏:\n\n",
        'btn_cancel_booking': "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ {time} {date}",
        'btn_reschedule_booking': "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ {time} {date}",
        'not_your_booking_cancel': "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –∑—Ä–æ–±–ª–µ–Ω–æ –Ω–µ –≤–∞–º–∏.",
        'booking_not_found': "–¶–µ–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –π–æ–≥–æ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        'booking_cancelled_success': "‚úÖ –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {date_formatted} –æ {time} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        'reschedule_intro': (
            "–í–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –∑–∞–ø–∏—Å –Ω–∞ {old_date_formatted} –æ {old_time}.\n"
            "–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å:"
        ),
        'not_your_booking_reschedule': "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –∑—Ä–æ–±–ª–µ–Ω–æ –Ω–µ –≤–∞–º–∏.",
        'faq_title': "**–ü—Ä–æ –Ω–∞—à —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂:**",
        'faq_text': (
            "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Å–ø–µ–∫—Ç—Ä –ø–æ—Å–ª—É–≥ –∑ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—É –¥–ª—è –ª–µ–≥–∫–æ–≤–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤. "
            "–®–≤–∏–¥–∫–æ, —è–∫—ñ—Å–Ω–æ, –∑ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é!\n\n"
            "**–ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (FAQ):**\n\n"
            "**‚ùì –Ø–∫—ñ –ø–æ—Å–ª—É–≥–∏ –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ?**\n"
            "‚úÖ –ú–∏ –≤–∏–∫–æ–Ω—É—î–º–æ –º–æ–Ω—Ç–∞–∂/–¥–µ–º–æ–Ω—Ç–∞–∂ —à–∏–Ω, –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –∫–æ–ª—ñ—Å, —Ä–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª—ñ–≤, —Å–µ–∑–æ–Ω–Ω—É –∑–º—ñ–Ω—É –≥—É–º–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∏—Å–∫—É.\n\n"
            "**‚ùì –Ø–∫–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥?**\n"
            "‚úÖ –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–∏–ø—É –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ —Ä–æ–∑–º—ñ—Ä—É –∫–æ–ª—ñ—Å. –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω—ñ —Ü—ñ–Ω–∏:\n"
            "  - –ó–º—ñ–Ω–∞ –≥—É–º–∏ R13-R15: –≤—ñ–¥ 400 –≥—Ä–Ω\n"
            "  - –ó–º—ñ–Ω–∞ –≥—É–º–∏ R16-R18: –≤—ñ–¥ 600 –≥—Ä–Ω\n"
            "  - –ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è: –≤—ñ–¥ 100 –≥—Ä–Ω/–∫–æ–ª–µ—Å–æ\n"
            "  - –†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª—É: –≤—ñ–¥ 150 –≥—Ä–Ω\n"
            "–î–ª—è —Ç–æ—á–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∞–±–æ –ø—Ä–∏—ó–∂–¥–∂–∞–π—Ç–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é!\n\n"
            "**‚ùì –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–π–º–∞—î —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂?**\n"
            "‚úÖ –ó–∞–∑–≤–∏—á–∞–π –ø–æ–≤–Ω–∞ –∑–º—ñ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É —à–∏–Ω –∑–∞–π–º–∞—î –≤—ñ–¥ 30 –¥–æ 60 —Ö–≤–∏–ª–∏–Ω. –†–µ–º–æ–Ω—Ç –æ–¥–Ω–æ–≥–æ –∫–æ–ª–µ—Å–∞ ‚Äì 15-30 —Ö–≤–∏–ª–∏–Ω.\n\n"
            "**‚ùì –ß–∏ –º–æ–∂—É —è –ø—Ä–∏—ó—Ö–∞—Ç–∏ –±–µ–∑ –∑–∞–ø–∏—Å—É?**\n"
            "‚úÖ –¢–∞–∫, –º–æ–∂–µ—Ç–µ, –∞–ª–µ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è. –î–ª—è –≤–∞—à–æ—ó –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
            "**‚ùì –©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ —è –∑–∞–ø—ñ–∑–Ω—é—Å—è?**\n"
            "‚úÖ –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –Ω–∞–º —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ! –Ø–∫—â–æ –≤–∏ –∑–∞–ø—ñ–∑–Ω—é—î—Ç–µ—Å—è –±—ñ–ª—å—à –Ω—ñ–∂ –Ω–∞ 15 —Ö–≤–∏–ª–∏–Ω, –≤–∞—à –∑–∞–ø–∏—Å –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ."
            "**–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:**\n"
            "–ü–Ω-–ü—Ç: 08:00 - 17:00\n"
            "–°–±-–ù–¥: –í–∏—Ö—ñ–¥–Ω–∏–π"
        ),
        'our_location_address': "–ú–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é: –º. –û–¥–µ—Å–∞, –≤—É–ª. –£—Å–ø–µ–Ω—Å—å–∫–∞, 1 (—Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ –∞–¥—Ä–µ—Å–∞, –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤–æ—é!)\n\n",
        'help_message': "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º.",
        'admin_new_booking': (
            "üîî **–ù–û–í–ò–ô –ó–ê–ü–ò–°!**\n\n"
            "**–ö–ª—ñ—î–Ω—Ç:** {client_name} (Telegram: {telegram_user_name}, ID: {user_id})\n"
            "**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:** {phone_number}\n"
            "**–î–∞—Ç–∞:** {date_formatted}\n"
            "**–ß–∞—Å:** {time}"
        ),
        'admin_cancellation': (
            "‚ùå **–°–ö–ê–°–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–°–£!**\n\n"
            "**–ö–ª—ñ—î–Ω—Ç:** {client_name} (Telegram: {telegram_user_name}, ID: {user_id})\n"
            "**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:** {phone_number}\n"
            "**–°–∫–∞—Å–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞:** {date_formatted}\n"
            "**–°–∫–∞—Å–æ–≤–∞–Ω–∏–π —á–∞—Å:** {time}" # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
        ),
        'admin_reschedule': (
            "üîÑ **–ü–ï–†–ï–ù–ï–°–ï–ù–ù–Ø –ó–ê–ü–ò–°–£!**\n\n"
            "**–ö–ª—ñ—î–Ω—Ç:** {client_name} (Telegram: {telegram_user_name}, ID: {user_id})\n"
            "**–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:** {phone_number}\n\n"
            "**–°—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å:**\n"
            "  –î–∞—Ç–∞: {old_date_formatted}\n"
            "  –ß–∞—Å: {old_time}\n\n"
            "**–ù–æ–≤–∏–π –∑–∞–ø–∏—Å:**\n"
            "  –î–∞—Ç–∞: {new_date_formatted}\n"
            "  –ß–∞—Å: {new_time}"
        ),
        'not_specified': "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        'not_specified_phone': "–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π",
        'unknown': "–ù–µ–≤—ñ–¥–æ–º–æ",
        'past_slot': " (–ú–∏–Ω—É–ª–æ)",
        'booked_slot': " (–ó–∞–π–Ω—è—Ç–æ)",
        'back_to_day_select': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–Ω—è",
        'back_to_my_bookings': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–æ—ó—Ö –∑–∞–ø–∏—Å—ñ–≤",
        'reminder_message': "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å! –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –∑–∞–≤—Ç—Ä–∞, {date_formatted} –æ {time}. –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—Å!",
        'rescheduled_successfully_message': "‚úÖ –í–∞—à –∑–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {date_formatted} –æ {time}."
    }
}

def get_text(context: ContextTypes.DEFAULT_TYPE, key: str, **kwargs) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ."""
    user_lang = context.user_data.get('language', 'ru') # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    text = translations.get(user_lang, translations['ru']).get(key, f"_{key}_") # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    return text.format(**kwargs)

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ---

async def notify_admin_new_booking(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    admin_context = ContextTypes.DEFAULT_TYPE(context.application, chat_id=ADMIN_CHAT_ID, user_id=ADMIN_CHAT_ID)
    admin_context.user_data['language'] = 'ru' 

    message = get_text(admin_context, 'admin_new_booking',
        client_name=booking_info.get('client_name', get_text(admin_context, 'not_specified')),
        telegram_user_name=booking_info.get('telegram_user_name', get_text(admin_context, 'not_specified')),
        user_id=booking_info['user_id'],
        phone_number=booking_info.get('phone_number', get_text(admin_context, 'not_specified_phone')),
        date_formatted=booking_info['date'].strftime('%d.%m.%Y'),
        time=booking_info['time']
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def notify_admin_cancellation(context: ContextTypes.DEFAULT_TYPE, booking_info: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    admin_context = ContextTypes.DEFAULT_TYPE(context.application, chat_id=ADMIN_CHAT_ID, user_id=ADMIN_CHAT_ID)
    admin_context.user_data['language'] = 'ru' 

    message = get_text(admin_context, 'admin_cancellation',
        client_name=booking_info.get('client_name', get_text(admin_context, 'not_specified')),
        telegram_user_name=booking_info.get('telegram_user_name', get_text(admin_context, 'not_specified')),
        user_id=booking_info['user_id'],
        phone_number=booking_info.get('phone_number', get_text(admin_context, 'not_specified_phone')),
        date_formatted=booking_info['date'].strftime('%d.%m.%Y'),
        time=booking_info['time']
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def notify_admin_reschedule(context: ContextTypes.DEFAULT_TYPE, old_booking: dict, new_booking: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –±—Ä–æ–Ω–∏."""
    if ADMIN_CHAT_ID is None:
        logger.warning("TELEGRAM_ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    admin_context = ContextTypes.DEFAULT_TYPE(context.application, chat_id=ADMIN_CHAT_ID, user_id=ADMIN_CHAT_ID)
    admin_context.user_data['language'] = 'ru' 

    message = get_text(admin_context, 'admin_reschedule',
        client_name=new_booking.get('client_name', get_text(admin_context, 'not_specified')),
        telegram_user_name=new_booking.get('telegram_user_name', get_text(admin_context, 'not_specified')),
        user_id=new_booking['user_id'],
        phone_number=new_booking.get('phone_number', get_text(admin_context, 'not_specified_phone')),
        old_date_formatted=old_booking['date'].strftime('%d.%m.%Y'),
        old_time=old_booking['time'],
        new_date_formatted=new_booking['date'].strftime('%d.%m.%Y'),
        new_time=new_booking['time']
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---
async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–ø–∏—Å–∏."""
    job = context.job
    
    chat_id = job.data['chat_id']
    user_id = job.data['user_id']
    date_str = job.data['date_str']
    time_str = job.data['time_str']
    user_lang = job.data['language']

    reminder_context = ContextTypes.DEFAULT_TYPE(context.application, chat_id=chat_id, user_id=user_id)
    reminder_context.user_data['language'] = user_lang

    reminder_message = get_text(reminder_context, 'reminder_message', 
                                date_formatted=datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y'), 
                                time=time_str)
    try:
        await context.bot.send_message(chat_id=chat_id, text=reminder_message, parse_mode='Markdown')
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –¥–ª—è –∑–∞–ø–∏—Å–∏ {date_str} {time_str}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---
async def test_reminder_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = update.effective_user.id
    
    logger.info(f"DEBUG: test_reminder_command received. Sender user_id: {user_id}")
    logger.info(f"DEBUG: ADMIN_CHAT_ID configured: {ADMIN_CHAT_ID}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if ADMIN_CHAT_ID is None or user_id != ADMIN_CHAT_ID:
        logger.warning(f"DEBUG: Access denied for user {user_id}. ADMIN_CHAT_ID is {ADMIN_CHAT_ID}")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –í PTB 22.x job_queue —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ application –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ context.job_queue
    # –ï—Å–ª–∏ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Application.
    if context.job_queue is None:
        logger.error("JobQueue is None in context for test_reminder_command. This should not happen if bot started correctly with PTB 22.x.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    chat_id = update.effective_chat.id
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    test_time = datetime.datetime.now(TIMEZONE) + datetime.timedelta(seconds=10)
    
    # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ send_reminder
    test_data = {
        'chat_id': chat_id,
        'user_id': user_id,
        'date_str': test_time.strftime('%Y-%m-%d'), # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è send_reminder
        'time_str': test_time.strftime('%H:%M'),    # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è send_reminder
        'language': context.user_data.get('language', 'ru') # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
    job_name = f"test_reminder_job_{chat_id}"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å,
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    for job in current_jobs:
        job.schedule_removal() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.name}")
        
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    context.job_queue.run_once(
        send_reminder, # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
        test_time,     # –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        data=test_data, # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é send_reminder —á–µ—Ä–µ–∑ context.job.data
        name=job_name  # –ò–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–∏—Å–∫–∞)
    )
    
    await update.message.reply_text(
        f"–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {test_time.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
    )
    logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {chat_id}")

# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò –¢–ï–°–¢–û–í–û–ì–û –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫,
    –ª–∏–±–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é, –µ—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω.
    """
    user_lang = context.user_data.get('language')

    if user_lang is None:
        keyboard = [
            [InlineKeyboardButton(translations['ru']['lang_button_ru'], callback_data="set_lang_ru")],
            [InlineKeyboardButton(translations['uk']['lang_button_uk'], callback_data="set_lang_uk")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(translations['ru']['choose_language'], reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(translations['ru']['choose_language'], reply_markup=reply_markup)
    else:
        await show_main_menu(update, context)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    lang_code = query.data.replace("set_lang_", "")
    context.user_data['language'] = lang_code
    
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ."""
    user = update.effective_user
    welcome_message = get_text(context, 'welcome_message', user_full_name=user.full_name)
    
    keyboard = [
        [InlineKeyboardButton(get_text(context, 'btn_book_appointment'), callback_data="book_appointment")],
        [InlineKeyboardButton(get_text(context, 'btn_my_bookings'), callback_data="my_bookings")],
        [InlineKeyboardButton(get_text(context, 'btn_info_and_faq'), callback_data="info_and_faq")], 
        [InlineKeyboardButton(get_text(context, 'btn_our_location'), callback_data="our_location")],
        [InlineKeyboardButton(get_text(context, 'btn_reviews'), callback_data="show_reviews")] # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–∑—ã–≤—ã"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message: 
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query: 
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–ù–û–ü–ö–ò "–û–¢–ó–´–í–´" ---
async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤."""
    query = update.callback_query
    await query.answer()

    text = get_text(context, 'reviews_message')
    keyboard = [[InlineKeyboardButton(get_text(context, 'btn_go_to_reviews_channel'), url=REVIEWS_CHANNEL_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---


async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    keyboard = []
    now_aware = datetime.datetime.now(TIMEZONE)
    today_in_tz = now_aware.date() 
    
    for i in range(7):  
        date = today_in_tz + datetime.timedelta(days=i)
        keyboard.append(
            [InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=f"select_date_{date.isoformat()}")]
        )
    
    keyboard.append([InlineKeyboardButton(get_text(context, 'btn_main_menu'), callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(context, 'select_day_for_booking'), reply_markup=reply_markup)

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    selected_date_str = query.data.replace("select_date_", "")
    selected_date_naive = datetime.date.fromisoformat(selected_date_str) 

    keyboard = []
    start_time = datetime.time(8, 0) 
    end_time = datetime.time(17, 0)  
    interval = datetime.timedelta(minutes=30)

    now_aware = datetime.datetime.now(TIMEZONE)
    
    current_slot_datetime = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, start_time))
    
    while current_slot_datetime.time() <= end_time:
        slot_str = current_slot_datetime.strftime("%H:%M")
        
        is_booked = booked_slots.get(selected_date_str, {}).get(slot_str) is not None
        
        is_past_slot = (current_slot_datetime < now_aware - datetime.timedelta(minutes=1)) 
        
        button_text = f"{slot_str}"
        if is_booked:
            button_text += get_text(context, 'booked_slot')
        elif is_past_slot:
            button_text += get_text(context, 'past_slot') 

        callback_data = f"select_time_{selected_date_str}_{slot_str}"
        
        is_disabled = is_booked or is_past_slot

        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=callback_data if not is_disabled else "ignore")] 
        )
        current_slot_datetime += interval

    if context.user_data.get('reschedule_mode'):
        keyboard.append([InlineKeyboardButton(get_text(context, 'back_to_my_bookings'), callback_data="my_bookings")])
    else:
        keyboard.append([InlineKeyboardButton(get_text(context, 'back_to_day_select'), callback_data="book_appointment")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        get_text(context, 'select_time_for_booking', date=selected_date_naive.strftime('%d.%m.%Y')),
        reply_markup=reply_markup
    )

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: 
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    query = update.callback_query
    await query.answer()

    if query.data == "ignore": 
        await query.answer(get_text(context, 'time_unavailable')) 
        return ConversationHandler.END 

    parts = query.data.split("_")
    selected_date_str = parts[2]
    selected_time_str = parts[3]
    
    context.user_data['selected_date'] = selected_date_str
    context.user_data['selected_time'] = selected_time_str

    selected_date_naive = datetime.date.fromisoformat(selected_date_str)
    selected_time_naive = datetime.time.fromisoformat(selected_time_str)
    selected_datetime_aware = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, selected_time_naive))

    now_aware = datetime.datetime.now(TIMEZONE)

    if selected_datetime_aware < now_aware - datetime.timedelta(minutes=1): 
        await query.edit_message_text(get_text(context, 'time_passed'))
        return ConversationHandler.END
    
    if booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text(get_text(context, 'time_booked'))
        return ConversationHandler.END

    if context.user_data.get('reschedule_mode') and \
       context.user_data.get('user_name_for_booking') and \
       context.user_data.get('phone_number'):
        
        confirmation_text = (
            f"{get_text(context, 'check_data')}\n\n"
            f"üìÖ **{get_text(context, 'date_label')}** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
            f"‚è∞ **{get_text(context, 'time_label')}** {selected_time_str}\n"
            f"üë§ **{get_text(context, 'name_label')}** {context.user_data['user_name_for_booking']}\n"
            f"üìû **{get_text(context, 'phone_label')}** {context.user_data['phone_number']}\n\n"
            f"{get_text(context, 'all_correct')}"
        )
        keyboard = [
            [InlineKeyboardButton(get_text(context, 'btn_confirm'), callback_data="confirm_booking")],
            [InlineKeyboardButton(get_text(context, 'btn_cancel_process'), callback_data="cancel_booking_process")] 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
        return ConversationHandler.END 
    else:
        await query.edit_message_text(get_text(context, 'enter_name'))
        return ASK_NAME 

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_name = update.message.text
    if not user_name:
        await update.message.reply_text(get_text(context, 'name_incorrect'))
        return ASK_NAME 

    context.user_data['user_name_for_booking'] = user_name 
    await update.message.reply_text(get_text(context, 'enter_phone'))
    return ASK_PHONE 

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å."""
    phone_number = update.message.text
    if not phone_number:
        await update.message.reply_text(get_text(context, 'phone_incorrect'))
        return ASK_PHONE 

    context.user_data['phone_number'] = phone_number 

    selected_date_str = context.user_data['selected_date']
    selected_time_str = context.user_data['selected_time']
    user_name = context.user_data['user_name_for_booking']
    
    confirmation_text = (
        f"{get_text(context, 'check_data')}\n\n"
        f"üìÖ **{get_text(context, 'date_label')}** {datetime.date.fromisoformat(selected_date_str).strftime('%d.%m.%Y')}\n"
        f"‚è∞ **{get_text(context, 'time_label')}** {selected_time_str}\n"
        f"üë§ **{get_text(context, 'name_label')}** {user_name}\n"
        f"üìû **{get_text(context, 'phone_label')}** {phone_number}\n\n"
        f"{get_text(context, 'all_correct')}"
    )
    
    keyboard = [
        [InlineKeyboardButton(get_text(context, 'btn_confirm'), callback_data="confirm_booking")],
        [InlineKeyboardButton(get_text(context, 'btn_cancel_process'), callback_data="cancel_booking_process")] 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
    return ConversationHandler.END 

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    query = update.callback_query
    await query.answer()

    selected_date_str = context.user_data.get('selected_date')
    selected_time_str = context.user_data.get('selected_time')
    user_name = context.user_data.get('user_name_for_booking')
    phone_number = context.user_data.get('phone_number')
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id 
    telegram_user_name = update.effective_user.full_name 
    user_lang = context.user_data.get('language', 'ru') 

    if not all([selected_date_str, selected_time_str, user_name, phone_number]):
        await query.edit_message_text(get_text(context, 'error_try_again'))
        context.user_data.clear()
        return ConversationHandler.END

    selected_date_naive = datetime.date.fromisoformat(selected_date_str)
    selected_time_naive = datetime.time.fromisoformat(selected_time_str)
    selected_datetime_aware = TIMEZONE.localize(datetime.datetime.combine(selected_date_naive, selected_time_naive))
    now_aware = datetime.datetime.now(TIMEZONE)

    if selected_datetime_aware < now_aware - datetime.timedelta(minutes=1) or booked_slots.get(selected_date_str, {}).get(selected_time_str) is not None:
        await query.edit_message_text(get_text(context, 'time_booked')) 
        context.user_data.clear()
        return ConversationHandler.END

    old_booking_key = context.user_data.get('old_booking_key') 
    old_booking_data = None
    if old_booking_key:
        old_date_str, old_time_str = old_booking_key.split('_')
        if old_date_str in booked_slots and old_time_str in booked_slots[old_date_str]:
            old_booking_data = booked_slots[old_date_str].pop(old_time_str)
            if not booked_slots[old_date_str]: 
                del booked_slots[old_date_str]
            logger.info(f"–°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å {old_booking_key} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")
            
            job_name_to_remove = f"reminder_{old_booking_key}"
            current_jobs = context.job_queue.get_jobs_by_name(job_name_to_remove)
            for job in current_jobs:
                job.schedule_removal()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {job_name_to_remove}")

    if selected_date_str not in booked_slots:
        booked_slots[selected_date_str] = {}
    
    new_booking_data = {
        'user_id': user_id,
        'telegram_user_name': telegram_user_name, 
        'client_name': user_name,
        'phone_number': phone_number,
        'language': user_lang
    }
    booked_slots[selected_date_str][selected_time_str] = new_booking_data
    
    confirmation_message = get_text(context, 'booking_confirmed',
        user_name=user_name,
        date_formatted=selected_date_naive.strftime('%d.%m.%Y'),
        time=selected_time_str,
        phone_number=phone_number
    )
    
    keyboard_after_confirm = [
        [InlineKeyboardButton(get_text(context, 'btn_my_bookings'), callback_data="my_bookings")],
        [InlineKeyboardButton(get_text(context, 'btn_main_menu'), callback_data="main_menu")] 
    ]
    reply_markup_after_confirm = InlineKeyboardMarkup(keyboard_after_confirm)

    await query.edit_message_text(confirmation_message, reply_markup=reply_markup_after_confirm, parse_mode='Markdown')

    admin_booking_info = {
        "user_id": user_id,
        "user_name": user_name,
        "date": selected_date_naive,
        "time": selected_time_str,
        "phone_number": phone_number,
        "telegram_user_name": telegram_user_name,
        "client_name": user_name 
    }

    if old_booking_data:
        old_booking_for_admin = {
            'date': datetime.date.fromisoformat(old_date_str),
            'time': old_time_str,
            'client_name': old_booking_data.get('client_name', get_text(context, 'unknown')),
            'telegram_user_name': old_booking_data.get('telegram_user_name', get_text(context, 'unknown')),
            'user_id': old_booking_data.get('user_id', get_text(context, 'unknown')),
            'phone_number': old_booking_data.get('phone_number', get_text(context, 'not_specified_phone'))
        }
        await notify_admin_reschedule(context, old_booking_for_admin, admin_booking_info)
    else:
        await notify_admin_new_booking(context, admin_booking_info)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ
    reminder_time = selected_datetime_aware - datetime.timedelta(days=1)
    if reminder_time > now_aware: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ –≤ –±—É–¥—É—â–µ–º
        job_name = f"reminder_{selected_date_str}_{selected_time_str}"
        context.job_queue.run_once(
            send_reminder,
            reminder_time,
            data={'chat_id': chat_id, 'user_id': user_id, 'date_str': selected_date_str, 'time_str': selected_time_str, 'language': user_lang},
            name=job_name
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {job_name} –Ω–∞ {reminder_time}")
    else:
        logger.warning(f"–ù–∞–ø–æ–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {selected_date_str} {selected_time_str} –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ.")

    context.user_data.clear() 
    return ConversationHandler.END

async def cancel_booking_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —Å–∞–º—É –∑–∞–ø–∏—Å—å)."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(get_text(context, 'process_cancelled'))
    context.user_data.clear() 
    return ConversationHandler.END

async def cancel_booking_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /cancel."""
    await update.message.reply_text(get_text(context, 'process_cancelled')) 
    context.user_data.clear() 
    return ConversationHandler.END

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–Ø–ú–ò ---

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_bookings = []
    now_aware = datetime.datetime.now(TIMEZONE)

    for date_str, times in booked_slots.items():
        for time_str, booking_info in times.items():
            if booking_info.get('user_id') == user_id:
                booking_datetime_naive = datetime.datetime.combine(datetime.date.fromisoformat(date_str), datetime.time.fromisoformat(time_str))
                booking_datetime_aware = TIMEZONE.localize(booking_datetime_naive)
                
                if booking_datetime_aware >= now_aware - datetime.timedelta(minutes=1): 
                    user_bookings.append({
                        'date': date_str,
                        'time': time_str,
                        'info': booking_info,
                        'datetime_obj': booking_datetime_aware 
                    })
    
    if not user_bookings:
        keyboard = [[InlineKeyboardButton(get_text(context, 'btn_book_appointment'), callback_data="book_appointment")]]
        keyboard.append([InlineKeyboardButton(get_text(context, 'btn_main_menu'), callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(get_text(context, 'no_active_bookings'), reply_markup=reply_markup)
        return

    user_bookings.sort(key=lambda x: x['datetime_obj'])

    message_text = get_text(context, 'your_current_bookings')
    keyboard = []
    for booking in user_bookings:
        date_str = booking['date']
        time_str = booking['time']
        booking_key = f"{date_str}_{time_str}" 
        
        message_text += (
            f"üìÖ **{get_text(context, 'date_label')}** {datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y')}\n"
            f"‚è∞ **{get_text(context, 'time_label')}** {time_str}\n"
            f"üë§ **{get_text(context, 'name_label')}** {booking['info'].get('client_name', get_text(context, 'not_specified'))}\n"
            f"üìû **{get_text(context, 'phone_label')}** {booking['info'].get('phone_number', get_text(context, 'not_specified_phone'))}\n\n"
        )
        keyboard.append([
            InlineKeyboardButton(get_text(context, 'btn_cancel_booking', time=time_str, date=datetime.date.fromisoformat(date_str).strftime('%d.%m')), callback_data=f"cancel_specific_booking_{booking_key}"),
            InlineKeyboardButton(get_text(context, 'btn_reschedule_booking', time=time_str, date=datetime.date.fromisoformat(date_str).strftime('%d.%m')), callback_data=f"reschedule_specific_booking_{booking_key}")
        ])
    
    keyboard.append([InlineKeyboardButton(get_text(context, 'btn_main_menu'), callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def cancel_specific_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    await query.answer()

    booking_key = query.data.replace("cancel_specific_booking_", "") 
    date_str, time_str = booking_key.split('_')
    user_id = update.effective_user.id

    if date_str in booked_slots and time_str in booked_slots[date_str]:
        booking_info = booked_slots[date_str][time_str]
        
        if booking_info.get('user_id') == user_id:
            del booked_slots[date_str][time_str]
            if not booked_slots[date_str]: 
                del booked_slots[date_str]
            
            await query.edit_message_text(
                get_text(context, 'booking_cancelled_success', date_formatted=datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y'), time=time_str)
            )
            
            admin_cancellation_info = {
                'user_id': user_id,
                'telegram_user_name': update.effective_user.full_name,
                'client_name': booking_info.get('client_name', get_text(context, 'not_specified')),
                'phone_number': booking_info.get('phone_number', get_text(context, 'not_specified_phone')),
                'date': datetime.date.fromisoformat(date_str),
                'time': time_str
            }
            await notify_admin_cancellation(context, admin_cancellation_info)

            job_name_to_remove = f"reminder_{booking_key}"
            current_jobs = context.job_queue.get_jobs_by_name(job_name_to_remove)
            for job in current_jobs:
                job.schedule_removal()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ {job_name_to_remove}")

        else:
            await query.edit_message_text(get_text(context, 'not_your_booking_cancel'))
    else:
        await query.edit_message_text(get_text(context, 'booking_not_found'))
    
    await my_bookings(update, context) 

async def reschedule_specific_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: 
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()

    booking_key = query.data.replace("reschedule_specific_booking_", "")
    date_str, time_str = booking_key.split('_')
    user_id = update.effective_user.id

    if date_str in booked_slots and time_str in booked_slots[date_str]:
        booking_info = booked_slots[date_str][time_str]
        
        if booking_info.get('user_id') == user_id:
            context.user_data['old_booking_key'] = booking_key
            context.user_data['reschedule_mode'] = True
            context.user_data['user_name_for_booking'] = booking_info.get('client_name')
            context.user_data['phone_number'] = booking_info.get('phone_number')

            await query.edit_message_text(
                get_text(context, 'reschedule_intro', old_date_formatted=datetime.date.fromisoformat(date_str).strftime('%d.%m.%Y'), old_time=time_str)
            )
            await book_appointment(update, context) 
            return ConversationHandler.END 
        else:
            await query.edit_message_text(get_text(context, 'not_your_booking_reschedule'))
    else:
        await query.edit_message_text(get_text(context, 'booking_not_found'))
    
    await my_bookings(update, context)
    return ConversationHandler.END 

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    context.user_data.pop('reschedule_mode', None) 
    context.user_data.pop('old_booking_key', None) 
    await show_main_menu(update, context) 

async def info_and_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    await query.answer()

    faq_text = get_text(context, 'faq_title') + "\n" + get_text(context, 'faq_text')

    keyboard = [[InlineKeyboardButton(get_text(context, 'btn_main_menu'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(faq_text, reply_markup=reply_markup, parse_mode='Markdown')

async def our_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞."""
    query = update.callback_query
    await query.answer()

    latitude = 46.467890 
    longitude = 30.730300 
    
    address_text = get_text(context, 'our_location_address')
    
    keyboard = [[InlineKeyboardButton(get_text(context, 'btn_main_menu'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=address_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await context.bot.send_location(
        chat_id=update.effective_chat.id, 
        latitude=latitude, 
        longitude=longitude
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    await update.message.reply_text(get_text(context, 'help_message'))


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable not set. Exiting.")
        return 

    # –í PTB 22.x JobQueue –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ Application.
    # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å application.job_queue = JobQueue()
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_reminder", test_reminder_command))
    application.add_handler(CallbackQueryHandler(set_language, pattern="^set_lang_"))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern="^book_appointment$"))
    application.add_handler(CallbackQueryHandler(select_date, pattern="^select_date_"))
    application.add_handler(CallbackQueryHandler(my_bookings, pattern="^my_bookings$")) 
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$")) 
    application.add_handler(CallbackQueryHandler(cancel_specific_booking, pattern="^cancel_specific_booking_")) 
    
    application.add_handler(CallbackQueryHandler(info_and_faq, pattern="^info_and_faq$"))
    application.add_handler(CallbackQueryHandler(our_location, pattern="^our_location$"))
    application.add_handler(CallbackQueryHandler(show_reviews, pattern="^show_reviews$")) # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤—ã"
    
    reschedule_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(reschedule_specific_booking, pattern="^reschedule_specific_booking_")],
        states={}, # –°–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ book_appointment –∏ select_time
        fallbacks=[CommandHandler("cancel", cancel_booking_command), CallbackQueryHandler(cancel_booking_process, pattern="^cancel_booking_process$")],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END 
        }
    )
    application.add_handler(reschedule_conv_handler)


    booking_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_time, pattern="^select_time_")], 
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)], 
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)], 
        },
        fallbacks=[CommandHandler("cancel", cancel_booking_command), CallbackQueryHandler(cancel_booking_process, pattern="^cancel_booking_process$")], 
    )
    application.add_handler(booking_conv_handler)
    
    application.add_handler(CallbackQueryHandler(confirm_booking, pattern="^confirm_booking$"))
    
    application.add_handler(CommandHandler("help", help_command))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
